service: ec2-create

package:
  exclude:
    - ./terraform/**

provider:
  name: aws
  runtime: python3.8
  stage: dev
  region: eu-central-1
  vpc:
    subnetIds:
      - ${file(./terraform/variables.json):private_subnet_id.value}  # Update the path
    securityGroupIds:
      - ${file(./terraform/variables.json):security_group_id.value}  # Update the path
  apiGateway:
    shouldStartNameWithService: true
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "ec2:RunInstances"
        - "ec2:DescribeInstances"
        - "ec2:DescribeSubnets"
        - "ec2:DescribeSecurityGroups"
        - "ec2:CreateNetworkInterface"
        - "ec2:DeleteNetworkInterface"
        - "ec2:DescribeNetworkInterfaces"
        - "ec2:CreateTags"
      Resource: "*"

functions:
  createInstance:
    handler: handler.create_instance
    timeout: 25  # Reduce to 30 seconds to match API Gateway limit
    events:
      - http:
          path: create
          method: post
          private: true
          cors: true

resources:
  Resources:
    MyAPIKey:
      Type: "AWS::ApiGateway::ApiKey"
      Properties:
        Name: MyAPIKey
        Enabled: true
        StageKeys:
          - RestApiId: 
              Ref: ApiGatewayRestApi
            StageName: dev
    MyUsagePlan:
      Type: "AWS::ApiGateway::UsagePlan"
      DependsOn: MyAPIKey
      Properties:
        ApiStages:
          - ApiId: 
              Ref: ApiGatewayRestApi
            Stage: dev
        Description: My Usage Plan
        Quota:
          Limit: 5000
          Offset: 2
          Period: MONTH
        Throttle:
          BurstLimit: 200
          RateLimit: 100
        UsagePlanName: MyUsagePlan
    MyUsagePlanKey:
      Type: "AWS::ApiGateway::UsagePlanKey"
      DependsOn: MyUsagePlan
      Properties:
        KeyId:
          Ref: MyAPIKey
        KeyType: API_KEY
        UsagePlanId:
          Ref: MyUsagePlan
